package com.siriuslab.onec.widget.domain.account.settings.mapper;

import com.siriuslab.onec.widget.domain.account.settings.dto.AccountSettingsUpdateRequest;
import com.siriuslab.onec.widget.domain.account.settings.entity.AccountSettingsEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

@Mapper
public interface AccountSettingsMapper {
    AccountSettingsMapper INSTANCE = Mappers.getMapper(AccountSettingsMapper.class);

    @Mapping(source = "settings.customerOrder", target = "customerOrder")
    @Mapping(source = "settings.demand", target = "demand")
    @Mapping(source = "settings.demandIn", target = "demandIn")
    @Mapping(source = "settings.salesReturn", target = "salesReturn")
    @Mapping(source = "settings.salesReturnIn", target = "salesReturnIn")
    @Mapping(source = "settings.supply", target = "supply")
    @Mapping(source = "settings.supplyIn", target = "supplyIn")
    @Mapping(source = "settings.purchaseReturn", target = "purchaseReturn")
    @Mapping(source = "settings.enter", target = "enter")
    @Mapping(source = "settings.enterIn", target = "enterIn")
    @Mapping(source = "settings.paymentIn", target = "paymentIn")
    @Mapping(source = "settings.paymentInIn", target = "paymentInIn")
    @Mapping(source = "settings.paymentOut", target = "paymentOut")
    @Mapping(source = "settings.paymentOutIn", target = "paymentOutIn")
    @Mapping(source = "settings.cashIn", target = "cashIn")
    @Mapping(source = "settings.cashInIn", target = "cashInIn")
    @Mapping(source = "settings.cashOut", target = "cashOut")
    @Mapping(source = "settings.cashOutIn", target = "cashOutIn")
    @Mapping(source = "settings.purchaseOrder", target = "purchaseOrder")
    @Mapping(source = "settings.loss", target = "loss")
    @Mapping(source = "settings.move", target = "move")
    @Mapping(source = "settings.processing", target = "processing")
    @Mapping(source = "settings.good", target = "good")
    @Mapping(source = "settings.goodIn", target = "goodIn")
    @Mapping(source = "settings.company", target = "company")
    @Mapping(source = "settings.companyIn", target = "companyIn")
    @Mapping(source = "settings.contract", target = "contract")
    @Mapping(source = "settings.contractIn", target = "contractIn")
    @Mapping(source = "settings.processingPlan", target = "processingPlan")
    @Mapping(source = "settings.bundle", target = "bundle")
    @Mapping(source = "settings.productFolder", target = "productFolder")
    @Mapping(source = "settings.productFolderIn", target = "productFolderIn")
    @Mapping(source = "settings.manually", target = "manually")
    @Mapping(source = "settings.productionTask", target = "productionTask")
    @Mapping(source = "settings.retailDemand", target = "retailDemand")
    @Mapping(source = "settings.retailSalesReturn", target = "retailSalesReturn")
    @Mapping(source = "settings.factureOut", target = "factureOut")
    @Mapping(source = "settings.abstractInventory", target = "abstractInventory")
    AccountSettingsEntity mapToEntity(AccountSettingsUpdateRequest request);

    @Mapping(target = "settings.customerOrder", source = "customerOrder")
    @Mapping(target = "settings.demand", source = "demand")
    @Mapping(target = "settings.demandIn", source = "demandIn")
    @Mapping(target = "settings.salesReturn", source = "salesReturn")
    @Mapping(target = "settings.salesReturnIn", source = "salesReturnIn")
    @Mapping(target = "settings.supply", source = "supply")
    @Mapping(target = "settings.supplyIn", source = "supplyIn")
    @Mapping(target = "settings.purchaseReturn", source = "purchaseReturn")
    @Mapping(target = "settings.enter", source = "enter")
    @Mapping(target = "settings.enterIn", source = "enterIn")
    @Mapping(target = "settings.paymentIn", source = "paymentIn")
    @Mapping(target = "settings.paymentInIn", source = "paymentInIn")
    @Mapping(target = "settings.paymentOut", source = "paymentOut")
    @Mapping(target = "settings.paymentOutIn", source = "paymentOutIn")
    @Mapping(target = "settings.cashIn", source = "cashIn")
    @Mapping(target = "settings.cashInIn", source = "cashInIn")
    @Mapping(target = "settings.cashOut", source = "cashOut")
    @Mapping(target = "settings.cashOutIn", source = "cashOutIn")
    @Mapping(target = "settings.purchaseOrder", source = "purchaseOrder")
    @Mapping(target = "settings.loss", source = "loss")
    @Mapping(target = "settings.move", source = "move")
    @Mapping(target = "settings.processing", source = "processing")
    @Mapping(target = "settings.good", source = "good")
    @Mapping(target = "settings.goodIn", source = "goodIn")
    @Mapping(target = "settings.company", source = "company")
    @Mapping(target = "settings.companyIn", source = "companyIn")
    @Mapping(target = "settings.contract", source = "contract")
    @Mapping(target = "settings.contractIn", source = "contractIn")
    @Mapping(target = "settings.processingPlan", source = "processingPlan")
    @Mapping(target = "settings.bundle", source = "bundle")
    @Mapping(target = "settings.manually", source = "manually")
    @Mapping(target = "settings.productionTask", source = "productionTask")
    @Mapping(target = "settings.retailDemand", source = "retailDemand")
    @Mapping(target = "settings.retailSalesReturn", source = "retailSalesReturn")
    @Mapping(target = "settings.factureOut", source = "factureOut")
    @Mapping(target = "settings.abstractInventory", source = "abstractInventory")
    AccountSettingsUpdateRequest mapToRequest(AccountSettingsEntity entity);
}
